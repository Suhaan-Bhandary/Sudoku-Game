{"version":3,"sources":["components/Node/Node.js","utility/arrayDeepCopy.js","utility/createSudokoGrid.js","utility/animateElement.js","utility/checkBoard.js","components/Grid/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","cell","handleClickCallback","className","row","column","changed","isValid","isModifiable","getCellClassName","onClick","value","arrayDeepCopy","arr","JSON","parse","stringify","getNode","createSudokoGrid","numberGrid","sudokoGrid","i","j","node","push","animateElement","element","animation","prefix","Promise","resolve","reject","animationName","document","querySelector","classList","add","addEventListener","event","stopPropagation","remove","once","getWrongLines","board","type","wrongLines","Set","dict","key","Object","hasOwnProperty","call","isBoxValid","x0","y0","console","log","getBoxNumber","x","y","Math","floor","checkBoard","wrongHorizontal","wrongVertical","wrongBoxes","boxValues","0","1","2","3","4","5","6","7","8","box","getWrongBoxes","has","Grid","useState","grid","setGrid","startingGrid","setStartingGrid","useEffect","newSudokoGrid","handleCellClick","newGrid","map","rowIndex","columnIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ac0a9688.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = (props) => {\r\n  let { cell, handleClickCallback } = props;\r\n\r\n  const getCellClassName = (cell) => {\r\n    let { row, column } = cell;\r\n    let className = `cell \r\n    ${row === 2 || row === 5 ? \"bottom-border\" : \"\"}\r\n    ${column === 2 || column === 5 ? \"right-border\" : \"\"}\r\n    ${cell.changed ? \"cell-changed\" : \"\"}\r\n    ${cell.isValid ? \"\" : \"cell-invalid\"}\r\n    ${cell.isModifiable ? \"cell-modifiable\" : \"\"}\r\n    `;\r\n\r\n    return className;\r\n  };\r\n\r\n  return (\r\n    <td\r\n      className={getCellClassName(cell)}\r\n      onClick={() =>\r\n        handleClickCallback(cell.row, cell.column, cell.isModifiable)\r\n      }\r\n    >\r\n      {cell.value !== 0 ? cell.value : \"\"}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","const arrayDeepCopy = (arr) => {\r\n  let newArray = JSON.parse(JSON.stringify(arr));\r\n  return newArray;\r\n};\r\n\r\nexport default arrayDeepCopy;","const getSudokoGrid = () => {\r\n  let sudokoGrid = [\r\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\r\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\r\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\r\n\r\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\r\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\r\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\r\n\r\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\r\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\r\n    [0, 0, 0, 0, 8, 0, 0, 7, 9],\r\n  ];\r\n  return sudokoGrid;\r\n};\r\n\r\nconst getNode = (row, column, value, isModifiable) => {\r\n  return {\r\n    row: row,\r\n    column: column,\r\n    value: value,\r\n    changed: false,\r\n    isValid: true,\r\n    isModifiable: isModifiable,\r\n  };\r\n};\r\n\r\nconst createSudokoGrid = () => {\r\n  const numberGrid = getSudokoGrid();\r\n  let sudokoGrid = [];\r\n\r\n  for (let i = 0; i <9;i++){\r\n    let row = [];\r\n    for(let j = 0; j < 9; j++){\r\n      let isModifiable = (numberGrid[i][j] === 0);\r\n      let node = getNode(i, j, numberGrid[i][j], isModifiable);\r\n      row.push(node);\r\n    }\r\n    sudokoGrid.push(row);\r\n  }\r\n\r\n  return sudokoGrid;\r\n}\r\n\r\nexport default createSudokoGrid;","const animateElement = (element, animation,prefix = \"animate__\") =>\r\n  // We create a Promise and return it\r\n  new Promise((resolve, reject) => {\r\n    const animationName = `${prefix}${animation}`;\r\n    const node = document.querySelector(element);\r\n\r\n    node.classList.add(`${prefix}animated`, animationName);\r\n\r\n    // When the animation ends, we clean the classes and resolve the Promise\r\n    function handleAnimationEnd(event) {\r\n      event.stopPropagation();\r\n      node.classList.remove(`${prefix}animated`, animationName);\r\n      resolve(\"Animation ended\");\r\n    }\r\n\r\n    node.addEventListener(\"animationend\", handleAnimationEnd, { once: true });\r\n  });\r\n\r\nexport default animateElement;\r\n","const getWrongLines = (board, type) => {\r\n  let wrongLines = new Set();\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let dict = {};\r\n\r\n    for (let j = 0; j < 9; j++) {\r\n      let key;\r\n      if (type === \"horizontal\") key = board[i][j].value;\r\n      else key = board[j][i].value;\r\n\r\n      if (key === 0) continue;\r\n\r\n      if (Object.hasOwnProperty.call(dict, key)) {\r\n        dict[key] += 1;\r\n        if (dict[key] > 1) {\r\n          wrongLines.add(i);\r\n          break;\r\n        }\r\n      } else dict[key] = 1;\r\n    }\r\n  }\r\n  return wrongLines;\r\n};\r\n\r\nconst isBoxValid = (board,x0,y0) => {\r\n  let dict = {};\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let key = board[x0 + i][y0 + j].value;\r\n      if (key === 0) continue;\r\n\r\n      if (Object.hasOwnProperty.call(dict, key)) {\r\n        dict[key] += 1;\r\n        if (dict[key] > 1) {\r\n          console.log(x0,y0);\r\n          return false;\r\n        }\r\n      } else dict[key] = 1;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst getWrongBoxes = (board) => {\r\n  let wrongBoxes = new Set();\r\n  let boxValues = {\r\n    0: { x: 0,y: 0 },\r\n    1: { x: 0,y: 3 },\r\n    2: { x: 0,y: 6 },\r\n    3: { x: 3,y: 0 },\r\n    4: { x: 3,y: 3 },\r\n    5: { x: 3,y: 6 },\r\n    6: { x: 6,y: 0 },\r\n    7: { x: 6,y: 3 },\r\n    8: { x: 6,y: 6 },\r\n  };\r\n\r\n  // We check for every boxes\r\n  for (let box = 0; box < 9; box++) {\r\n    // Now check all cells of the selected box\r\n    let x0 = boxValues[box].x;\r\n    let y0 = boxValues[box].y;\r\n\r\n    if(!isBoxValid(board,x0,y0)) {\r\n      wrongBoxes.add(box);\r\n    }\r\n  }\r\n\r\n  return wrongBoxes;\r\n};\r\n\r\nconst getBoxNumber = (x, y) => {\r\n  let x0 = Math.floor(x / 3);\r\n  let y0 = Math.floor(y / 3);\r\n  let BoxNumber = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n  ][x0][y0];\r\n  return BoxNumber;\r\n};\r\n\r\nconst checkBoard = (board) => {\r\n  // Check for the Horizontal\r\n  // we will check all the board\r\n\r\n  let wrongHorizontal = getWrongLines(board, \"horizontal\");\r\n  let wrongVertical = getWrongLines(board, \"vertical\");\r\n  let wrongBoxes = getWrongBoxes(board);\r\n\r\n  console.log(getBoxNumber(1,5));\r\n  console.log(wrongBoxes);\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (\r\n        wrongHorizontal.has(i) ||\r\n        wrongVertical.has(j) ||\r\n        wrongBoxes.has(getBoxNumber(i,j))\r\n      ) {\r\n        board[i][j].isValid = false;\r\n      } else {\r\n        board[i][j].isValid = true;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default checkBoard;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Node from \"../Node/Node\";\r\nimport {\r\n  animateElement,\r\n  arrayDeepCopy,\r\n  checkBoard,\r\n  createSudokoGrid,\r\n} from \"../../utility\";\r\n\r\nimport \"./Grid.css\";\r\nimport \"animate.css\";\r\n\r\nconst Grid = () => {\r\n  const [grid, setGrid] = useState(null);\r\n  const [startingGrid, setStartingGrid] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Creating a grid for the sudoko\r\n    let newSudokoGrid = createSudokoGrid();\r\n    setStartingGrid(arrayDeepCopy(newSudokoGrid));\r\n    setGrid(arrayDeepCopy(newSudokoGrid));\r\n  }, []);\r\n\r\n  const handleReset = () => {\r\n    setGrid(arrayDeepCopy(startingGrid));\r\n  };\r\n\r\n  const handleCellClick = (row, column, isModifiable) => {\r\n    if (!isModifiable){\r\n      animateElement(\".grid-table\", \"headShake\");\r\n      return;\r\n    }\r\n\r\n    let newGrid = [...grid];\r\n\r\n    newGrid[row][column].value = newGrid[row][column].value + 1;\r\n    if (newGrid[row][column].value > 9) newGrid[row][column].value = 0;\r\n\r\n    newGrid[row][column].changed = newGrid[row][column].value !== startingGrid[row][column].value;\r\n    \r\n    checkBoard(newGrid);\r\n\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1 onClick={() => handleReset()}>Reset</h1>\r\n\r\n      <table className=\"grid-table\">\r\n        <tbody>\r\n          {grid &&\r\n            grid.map((row, rowIndex) => {\r\n              return (\r\n                <tr className=\"row\" key={rowIndex}>\r\n                  {row.map((cell, columnIndex) => {\r\n                    return (\r\n                      <Node\r\n                        key={rowIndex + \"-\" + columnIndex}\r\n                        cell={cell}\r\n                        handleClickCallback={handleCellClick}\r\n                      />\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from 'react'\nimport Grid from './components/Grid/Grid'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1 className=\"main-heading\">\n        Sudoko Game\n      </h1>\n      <Grid/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}