{"version":3,"sources":["components/Grid/Grid.js","components/Node/Node.js","components/ChoiceBoard/ChoiceBoard.js","components/Button/Button.js","components/InformationModal/InformationModal.js","utility/arrayDeepCopy.js","utility/createSudokuGrid.js","utility/animateElement.js","utility/checkBoard.js","utility/solveSudoku.js","screens/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","grid","handleCellClick","className","map","row","rowIndex","cell","columnIndex","handleClickCallback","Node","props","column","isValid","isModifiable","isHinted","getCellClassName","onClick","value","CHOICES1","CHOICES2","ChoiceBoard","setClickValue","selected","choice","selectedClass","STYLES","Button","text","type","buttonStyle","checkButtonStyle","includes","InformationModal","closeModal","href","window","open","arrayDeepCopy","arr","JSON","parse","stringify","isValidNode","col","board","cellValue","i","x0","Math","floor","y0","j","solveRandomSudoku","k","num","random","console","log","getSudokuGrid","sudokuGrid","getNode","createSudokuGrid","numberGrid","node","push","animateElement","element","animation","prefix","Promise","resolve","reject","animationName","document","querySelector","classList","add","addEventListener","event","stopPropagation","remove","once","getWrongLines","wrongLines","Set","dict","key","Object","hasOwnProperty","call","isBoxValid","getBoxNumber","x","y","checkBoard","wrongHorizontal","wrongVertical","wrongBoxes","boxValues","0","1","2","3","4","5","6","7","8","box","getWrongBoxes","has","solveSudoku","Game","useState","setGrid","startingGrid","setStartingGrid","clickValue","showInformationModal","setShowInformationModal","useEffect","localStorage","getItem","newSudokuGrid","setItem","setCurrentGrid","givenGrid","show","newGrid","solvedBoard","alert","emptyNodePositionList","length","newBoard","hintNode","hint_row","hint_column","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.448f1c72.chunk.js","sourcesContent":["import React from \"react\";\r\n// Css files\r\nimport \"./Grid.css\";\r\nimport \"animate.css\";\r\n// Components\r\nimport { Node } from \"./../index.js\";\r\n\r\nconst Grid = ({ grid, handleCellClick }) => {\r\n  return (\r\n    <table className=\"grid-table\">\r\n      <tbody>\r\n        {grid &&\r\n          grid.map((row, rowIndex) => {\r\n            return (\r\n              <tr className=\"row\" key={rowIndex}>\r\n                {row.map((cell, columnIndex) => {\r\n                  return (\r\n                    <Node\r\n                      key={rowIndex + \"-\" + columnIndex}\r\n                      cell={cell}\r\n                      handleClickCallback={handleCellClick}\r\n                    />\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = (props) => {\r\n  let { cell, handleClickCallback } = props;\r\n\r\n  const getCellClassName = (cell) => {\r\n    let { row, column } = cell;\r\n    let className = `cell \r\n    ${row === 2 || row === 5 ? \"bottom-border\" : \"\"}\r\n    ${column === 2 || column === 5 ? \"right-border\" : \"\"}\r\n    ${cell.isValid ? \"\" : \"cell-invalid\"}\r\n    ${cell.isModifiable ? \"cell-modifiable\" : \"\"}\r\n    ${cell.isHinted ? \"cell-hinted\" : \"\"}\r\n    `;\r\n    return className;\r\n  };\r\n\r\n  return (\r\n    <td\r\n      className={getCellClassName(cell)}\r\n      onClick={() =>\r\n        handleClickCallback(cell.row, cell.column, cell.isModifiable)\r\n      }\r\n    >\r\n      {cell.value !== 0 ? cell.value : \"\"}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport \"./ChoiceBoard.css\";\r\nimport { FaEraser } from \"react-icons/fa\";\r\n\r\n\r\nconst CHOICES1 = [1, 2, 3, 4, 5];\r\nconst CHOICES2 = [6, 7, 8, 9];\r\n\r\nconst ChoiceBoard = ({ setClickValue,selected }) => {\r\n  return (\r\n    <div className=\"ChoiceBoard\">\r\n      <div className=\"choice-container choices-one\">\r\n        {CHOICES1.map((choice) => {\r\n          let selectedClass = choice === selected ? \"selected\" : \"\";\r\n          return (\r\n            <div\r\n              className={`choice ${selectedClass}`}\r\n              key={`key-1-${choice}`}\r\n              onClick={() => setClickValue(choice)}\r\n            >\r\n              <p className=\"choice-text\">{choice}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"choice-container choices-two\">\r\n        {CHOICES2.map((choice) => {\r\n          let selectedClass = choice === selected ? \"selected\" : \"\";\r\n          return (\r\n            <div\r\n              className={`choice ${selectedClass}`}\r\n              key={`key-2-${choice}`}\r\n              onClick={() => setClickValue(choice)}\r\n            >\r\n              <p className=\"choice-text\">{choice}</p>\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        {/* Eraser class: value of zero */}\r\n        <div\r\n          className={`choice ${selected === 0 ? \"selected-eraser\" : \"\"}`}\r\n          key={`key-2-${0}`}\r\n          onClick={() => setClickValue(0)}\r\n        >\r\n          <FaEraser/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChoiceBoard;\r\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst STYLES = [\n  \"btn--primary--solid\",\n  \"btn--warning--solid\",\n  \"btn--danger--solid\",\n  \"btn--success--solid\",\n  \"btn--primary--outline\",\n  \"btn--warning--outline\",\n  \"btn--danger--outline\",\n  \"btn--success--outline\",\n];\n\nconst Button = ({ text, type, onClick, buttonStyle }) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle)\n    ? buttonStyle\n    : STYLES[0];\n\n  return (\n    <button className={`btn ${checkButtonStyle}`} onClick={onClick} type={type}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\r\nimport \"./InformationModal.css\";\r\n\r\nimport Button from \"./../Button/Button.js\";\r\n\r\nconst InformationModal = ({ closeModal }) => {\r\n  return (\r\n    <div className=\"InformationModal\">\r\n      <div className=\"modal-container\">\r\n        <div className=\"modal-close-btn-container\">\r\n          <button onClick={closeModal}>X</button>\r\n        </div>\r\n        <div className=\"modal-title\">\r\n          <h1>Sudoku Game</h1>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <p>\r\n            Welcome to the sudoku game, this game is developed as a Case Study\r\n            of DM, it includes the sudoku generation and sudoku solver!\r\n          </p>\r\n          <div className=\"links\">\r\n            <a href=\"www.linkedin.com/in/suhaan-bhandary\">LinkedIn</a>\r\n            <a href=\"https://www.youtube.com/channel/UCHfmmdKuRDmZ5EUzGdqI7-Q\">\r\n              YouTube\r\n            </a>\r\n            <a href=\"https://github.com/Suhaan-Bhandary\">GitHub</a>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <Button\r\n            onClick={() =>\r\n              window.open(\"https://github.com/Suhaan-Bhandary/Sudoku-Game\")\r\n            }\r\n            buttonStyle=\"btn--primary--solid\"\r\n            text=\"GitHub\"\r\n          />\r\n          <Button\r\n            onClick={closeModal}\r\n            buttonStyle=\"btn--success--solid\"\r\n            text=\"Continue\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InformationModal;\r\n","const arrayDeepCopy = (arr) => {\r\n  let newArray = JSON.parse(JSON.stringify(arr));\r\n  return newArray;\r\n};\r\n\r\nexport default arrayDeepCopy;","const isValidNode = (row, col, value, board) => {\r\n  const cellValue = value;\r\n\r\n  // Check horizontal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[row][i] === cellValue) return false;\r\n  }\r\n\r\n  // Check Vertucal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[i][col] === cellValue) return false;\r\n  }\r\n\r\n  // check box: we have to only check the diagonal of the box\r\n  let x0 = Math.floor(row / 3) * 3;\r\n  let y0 = Math.floor(col / 3) * 3;\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      if (board[x0 + i][y0 + j] === cellValue) return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst solveRandomSudoku = (board) => {\r\n  //   console.log(board);\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (board[i][j] === 0) {\r\n        for (let k = 1; k <= 9; k++) {\r\n          let num = Math.floor(Math.random() * 9) + 1;\r\n          if (isValidNode(i, j, num, board)) {\r\n            board[i][j] = num;\r\n            if (solveRandomSudoku(board)) return true;\r\n            board[i][j] = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  console.log(board);\r\n  return true;\r\n};\r\n\r\nconst getSudokuGrid = () => {\r\n  let sudokuGrid = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ];\r\n  \r\n  solveRandomSudoku(sudokuGrid);\r\n\r\n  let emptyPositions = 81;\r\n  for (let i = 0; i <emptyPositions; i++) {\r\n    let row = Math.floor(Math.random() * 9);\r\n    let col = Math.floor(Math.random() * 9);\r\n    sudokuGrid[row][col] = 0;\r\n  }\r\n  \r\n  console.log(sudokuGrid);\r\n\r\n  return sudokuGrid;\r\n};\r\n\r\n// const getSudokuGrid = () => {\r\n//   let sudokuGrid = [\r\n//     [5, 3, 0, 0, 7, 0, 0, 0, 0],\r\n//     [6, 0, 0, 1, 9, 5, 0, 0, 0],\r\n//     [0, 9, 8, 0, 0, 0, 0, 6, 0],\r\n\r\n//     [8, 0, 0, 0, 6, 0, 0, 0, 3],\r\n//     [4, 0, 0, 8, 0, 3, 0, 0, 1],\r\n//     [7, 0, 0, 0, 2, 0, 0, 0, 6],\r\n\r\n//     [0, 6, 0, 0, 0, 0, 2, 8, 0],\r\n//     [0, 0, 0, 4, 1, 9, 0, 0, 5],\r\n//     [0, 0, 0, 0, 8, 0, 0, 7, 9],\r\n//   ];\r\n//   return sudokuGrid;\r\n// };\r\n\r\nconst getNode = (row, column, value, isModifiable) => {\r\n  return {\r\n    row: row,\r\n    column: column,\r\n    value: value,\r\n    isValid: true,\r\n    isModifiable: isModifiable,\r\n    isHinted: false,\r\n  };\r\n};\r\n\r\nconst createSudokuGrid = () => {\r\n  const numberGrid = getSudokuGrid();\r\n  let sudokuGrid = [];\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < 9; j++) {\r\n      let isModifiable = numberGrid[i][j] === 0;\r\n      let node = getNode(i, j, numberGrid[i][j], isModifiable);\r\n      row.push(node);\r\n    }\r\n    sudokuGrid.push(row);\r\n  }\r\n\r\n  return sudokuGrid;\r\n};\r\n\r\nexport default createSudokuGrid;\r\n","const animateElement = (element, animation,prefix = \"animate__\") =>\r\n  // We create a Promise and return it\r\n  new Promise((resolve, reject) => {\r\n    const animationName = `${prefix}${animation}`;\r\n    const node = document.querySelector(element);\r\n\r\n    node.classList.add(`${prefix}animated`, animationName);\r\n\r\n    // When the animation ends, we clean the classes and resolve the Promise\r\n    function handleAnimationEnd(event) {\r\n      event.stopPropagation();\r\n      node.classList.remove(`${prefix}animated`, animationName);\r\n      resolve(\"Animation ended\");\r\n    }\r\n\r\n    node.addEventListener(\"animationend\", handleAnimationEnd, { once: true });\r\n  });\r\n\r\nexport default animateElement;\r\n","const getWrongLines = (board, type) => {\r\n  let wrongLines = new Set();\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let dict = {};\r\n\r\n    for (let j = 0; j < 9; j++) {\r\n      let key;\r\n      if (type === \"horizontal\") key = board[i][j].value;\r\n      else key = board[j][i].value;\r\n\r\n      if (key === 0) continue;\r\n\r\n      if (Object.hasOwnProperty.call(dict, key)) {\r\n        dict[key] += 1;\r\n        if (dict[key] > 1) {\r\n          wrongLines.add(i);\r\n          break;\r\n        }\r\n      } else dict[key] = 1;\r\n    }\r\n  }\r\n  return wrongLines;\r\n};\r\n\r\nconst isBoxValid = (board,x0,y0) => {\r\n  let dict = {};\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let key = board[x0 + i][y0 + j].value;\r\n      if (key === 0) continue;\r\n\r\n      if (Object.hasOwnProperty.call(dict, key)) {\r\n        dict[key] += 1;\r\n        if (dict[key] > 1) {\r\n          console.log(x0,y0);\r\n          return false;\r\n        }\r\n      } else dict[key] = 1;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst getWrongBoxes = (board) => {\r\n  let wrongBoxes = new Set();\r\n  let boxValues = {\r\n    0: { x: 0,y: 0 },\r\n    1: { x: 0,y: 3 },\r\n    2: { x: 0,y: 6 },\r\n    3: { x: 3,y: 0 },\r\n    4: { x: 3,y: 3 },\r\n    5: { x: 3,y: 6 },\r\n    6: { x: 6,y: 0 },\r\n    7: { x: 6,y: 3 },\r\n    8: { x: 6,y: 6 },\r\n  };\r\n\r\n  // We check for every boxes\r\n  for (let box = 0; box < 9; box++) {\r\n    // Now check all cells of the selected box\r\n    let x0 = boxValues[box].x;\r\n    let y0 = boxValues[box].y;\r\n\r\n    if(!isBoxValid(board,x0,y0)) {\r\n      wrongBoxes.add(box);\r\n    }\r\n  }\r\n\r\n  return wrongBoxes;\r\n};\r\n\r\nconst getBoxNumber = (x, y) => {\r\n  let x0 = Math.floor(x / 3);\r\n  let y0 = Math.floor(y / 3);\r\n  let BoxNumber = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n  ][x0][y0];\r\n  return BoxNumber;\r\n};\r\n\r\nconst checkBoard = (board) => {\r\n  // Check for the Horizontal\r\n  // we will check all the board\r\n\r\n  let wrongHorizontal = getWrongLines(board, \"horizontal\");\r\n  let wrongVertical = getWrongLines(board, \"vertical\");\r\n  let wrongBoxes = getWrongBoxes(board);\r\n\r\n  console.log(getBoxNumber(1,5));\r\n  console.log(wrongBoxes);\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (\r\n        wrongHorizontal.has(i) ||\r\n        wrongVertical.has(j) ||\r\n        wrongBoxes.has(getBoxNumber(i,j))\r\n      ) {\r\n        board[i][j].isValid = false;\r\n      } else {\r\n        board[i][j].isValid = true;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default checkBoard;\r\n","const isValidNode = (row, col, value, board) => {\r\n  const cellValue = value;\r\n\r\n  // Check horizontal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[row][i].value === cellValue) return false;\r\n  }\r\n\r\n  // Check Vertucal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[i][col].value === cellValue) return false;\r\n  }\r\n\r\n  // check box: we have to only check the diagonal of the box\r\n  let x0 = Math.floor(row / 3) * 3;\r\n  let y0 = Math.floor(col / 3) * 3;\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      if (board[x0 + i][y0 + j].value === cellValue) return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (board) => {\r\n  //   console.log(board);\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (board[i][j].value === 0) {\r\n        for (let k = 1; k <= 9; k++) {\r\n          if (isValidNode(i, j, k, board)) {\r\n            board[i][j].value = k;\r\n            if(solveSudoku(board))return true;\r\n            board[i][j].value = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default solveSudoku;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./Game.css\";\r\nimport {\r\n  Grid,\r\n  ChoiceBoard,\r\n  Button,\r\n  InformationModal,\r\n} from \"../../components/index.js\";\r\nimport {\r\n  animateElement,\r\n  arrayDeepCopy,\r\n  checkBoard,\r\n  createSudokuGrid,\r\n  solveSudoku,\r\n} from \"../../utility\";\r\n\r\nconst Game = () => {\r\n  const [grid, setGrid] = useState(null);\r\n  const [startingGrid, setStartingGrid] = useState(null);\r\n  const [clickValue, setClickValue] = useState(1);\r\n\r\n  // Logic for modal\r\n  const [showInformationModal, setShowInformationModal] = useState(false);\r\n  const [showWonModal, setShowWonModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Creating a grid for the sudoku\r\n    if (\r\n      localStorage.getItem(\"startingGrid\") == null ||\r\n      localStorage.getItem(\"currentGrid\") == null\r\n    ) {\r\n      let newSudokuGrid = createSudokuGrid();\r\n      setStartingGrid(arrayDeepCopy(newSudokuGrid));\r\n      setGrid(arrayDeepCopy(newSudokuGrid));\r\n\r\n      localStorage.setItem(\"startingGrid\", JSON.stringify(newSudokuGrid));\r\n      localStorage.setItem(\"currentGrid\", JSON.stringify(newSudokuGrid));\r\n    } else {\r\n      setStartingGrid(JSON.parse(localStorage.getItem(\"startingGrid\")));\r\n      setGrid(JSON.parse(localStorage.getItem(\"currentGrid\")));\r\n    }\r\n  }, []);\r\n\r\n  const setCurrentGrid = (givenGrid) => {\r\n    // setting the value to the grid and also to the local storage\r\n    setGrid(givenGrid);\r\n    localStorage.setItem(\"currentGrid\", JSON.stringify(givenGrid));\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setCurrentGrid(arrayDeepCopy(startingGrid));\r\n  };\r\n\r\n  const handleSolve = () => {\r\n    let solvedBoard = JSON.parse(JSON.stringify(grid));\r\n    let solvedStatus = solveSudoku(solvedBoard);\r\n    if (solvedStatus === false) {\r\n      alert(\"Cannot be solved!\");\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (grid[i][j].value === 0) {\r\n          solvedBoard[i][j].isHinted = true;\r\n          solvedBoard[i][j].isModifiable = false;\r\n        }\r\n      }\r\n    }\r\n    setCurrentGrid(solvedBoard);\r\n  };\r\n\r\n  const handleHint = () => {\r\n    let solvedBoard = JSON.parse(JSON.stringify(grid));\r\n    let solvedStatus = solveSudoku(solvedBoard);\r\n    if (solvedStatus === false) {\r\n      alert(\"Cannot be solved!\");\r\n      return;\r\n    }\r\n\r\n    // Finding all the empty nodes\r\n    let emptyNodePositionList = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (grid[i][j].value === 0) {\r\n          emptyNodePositionList.push([i, j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emptyNodePositionList.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Making new node and replacing the empty value with the hint\r\n    let newBoard = JSON.parse(JSON.stringify(grid));\r\n    const hintNode =\r\n      emptyNodePositionList[\r\n        Math.floor(Math.random() * emptyNodePositionList.length)\r\n      ];\r\n    let hint_row = hintNode[0];\r\n    let hint_column = hintNode[1];\r\n\r\n    newBoard[hint_row][hint_column].value =\r\n      solvedBoard[hint_row][hint_column].value;\r\n    newBoard[hint_row][hint_column].isHinted = true;\r\n    newBoard[hint_row][hint_column].isModifiable = false;\r\n\r\n    setCurrentGrid(newBoard);\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    let newSudokuGrid = createSudokuGrid();\r\n    setStartingGrid(arrayDeepCopy(newSudokuGrid));\r\n    setGrid(arrayDeepCopy(newSudokuGrid));\r\n\r\n    localStorage.setItem(\"startingGrid\", JSON.stringify(newSudokuGrid));\r\n    localStorage.setItem(\"currentGrid\", JSON.stringify(newSudokuGrid));\r\n  };\r\n\r\n  const handleCellClick = (row, column, isModifiable) => {\r\n    if (!isModifiable) {\r\n      animateElement(\".grid-table\", \"headShake\");\r\n      return;\r\n    }\r\n\r\n    let newGrid = [...grid];\r\n\r\n    newGrid[row][column].value = clickValue;\r\n\r\n    checkBoard(newGrid);\r\n\r\n    // setting the value to the grid and also to the local storage\r\n    setCurrentGrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      <h1\r\n        onClick={() => setShowInformationModal((show) => !show)}\r\n        className=\"main-title\"\r\n      >\r\n        Sudoku Game\r\n      </h1>\r\n      {showInformationModal && (\r\n        <InformationModal\r\n          closeModal={() => setShowInformationModal((show) => !show)}\r\n        />\r\n      )}\r\n\r\n      {/* TODO:Make a Game won modal */}\r\n\r\n      <Grid handleCellClick={handleCellClick} grid={grid} />\r\n\r\n      <ChoiceBoard setClickValue={setClickValue} selected={clickValue} />\r\n\r\n      <div className=\"action-container\">\r\n        <Button\r\n          onClick={handleReset}\r\n          buttonStyle=\"btn--primary--solid\"\r\n          text=\"Clear\"\r\n        />\r\n        <Button\r\n          onClick={handleSolve}\r\n          buttonStyle=\"btn--success--solid\"\r\n          text=\"Solve\"\r\n        />\r\n        <Button\r\n          onClick={handleHint}\r\n          buttonStyle=\"btn--warning--solid\"\r\n          text=\"Hint\"\r\n        />\r\n        <Button\r\n          onClick={handleNewGame}\r\n          buttonStyle=\"btn--danger--solid\"\r\n          text=\"New Game\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport Game from \"./screens/Game/Game\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}