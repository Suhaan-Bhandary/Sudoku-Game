{"version":3,"sources":["components/Node/Node.js","utility/arrayDeepCopy.js","utility/createSudokuGrid.js","utility/animateElement.js","utility/checkBoard.js","utility/solveSudoku.js","components/Grid/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","cell","handleClickCallback","className","row","column","isValid","isModifiable","isHinted","getCellClassName","onClick","value","arrayDeepCopy","arr","JSON","parse","stringify","isValidNode","col","board","cellValue","i","x0","Math","floor","y0","j","solveRandomSudoku","k","num","random","console","log","getSudokuGrid","sudokuGrid","getNode","createSudokuGrid","numberGrid","node","push","animateElement","element","animation","prefix","Promise","resolve","reject","animationName","document","querySelector","classList","add","addEventListener","event","stopPropagation","remove","once","getWrongLines","type","wrongLines","Set","dict","key","Object","hasOwnProperty","call","isBoxValid","getBoxNumber","x","y","checkBoard","wrongHorizontal","wrongVertical","wrongBoxes","boxValues","0","1","2","3","4","5","6","7","8","box","getWrongBoxes","has","solveSudoku","Grid","useState","grid","setGrid","startingGrid","setStartingGrid","useEffect","localStorage","getItem","newSudokuGrid","setItem","setCurrentGrid","givenGrid","handleCellClick","newGrid","solvedBoard","alert","handleSolve","emptyNodePositionList","length","newBoard","hintNode","hint_row","hint_column","handleHint","handleNewGame","map","rowIndex","columnIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf431e43.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = (props) => {\r\n  let { cell, handleClickCallback } = props;\r\n\r\n  const getCellClassName = (cell) => {\r\n    let { row, column } = cell;\r\n    let className = `cell \r\n    ${row === 2 || row === 5 ? \"bottom-border\" : \"\"}\r\n    ${column === 2 || column === 5 ? \"right-border\" : \"\"}\r\n    ${cell.isValid ? \"\" : \"cell-invalid\"}\r\n    ${cell.isModifiable ? \"cell-modifiable\" : \"\"}\r\n    ${cell.isHinted ? \"cell-hinted\" : \"\"}\r\n    `;\r\n\r\n    return className;\r\n  };\r\n\r\n  return (\r\n    <td\r\n      className={getCellClassName(cell)}\r\n      onClick={() =>\r\n        handleClickCallback(cell.row, cell.column, cell.isModifiable)\r\n      }\r\n    >\r\n      {cell.value !== 0 ? cell.value : \"\"}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","const arrayDeepCopy = (arr) => {\r\n  let newArray = JSON.parse(JSON.stringify(arr));\r\n  return newArray;\r\n};\r\n\r\nexport default arrayDeepCopy;","const isValidNode = (row, col, value, board) => {\r\n  const cellValue = value;\r\n\r\n  // Check horizontal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[row][i] === cellValue) return false;\r\n  }\r\n\r\n  // Check Vertucal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[i][col] === cellValue) return false;\r\n  }\r\n\r\n  // check box: we have to only check the diagonal of the box\r\n  let x0 = Math.floor(row / 3) * 3;\r\n  let y0 = Math.floor(col / 3) * 3;\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      if (board[x0 + i][y0 + j] === cellValue) return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst solveRandomSudoku = (board) => {\r\n  //   console.log(board);\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (board[i][j] === 0) {\r\n        for (let k = 1; k <= 9; k++) {\r\n          let num = Math.floor(Math.random() * 9) + 1;\r\n          if (isValidNode(i, j, num, board)) {\r\n            board[i][j] = num;\r\n            if (solveRandomSudoku(board)) return true;\r\n            board[i][j] = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  console.log(board);\r\n  return true;\r\n};\r\n\r\nconst getSudokuGrid = () => {\r\n  let sudokuGrid = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ];\r\n  \r\n  solveRandomSudoku(sudokuGrid);\r\n\r\n  let emptyPositions = 81;\r\n  for (let i = 0; i <emptyPositions; i++) {\r\n    let row = Math.floor(Math.random() * 9);\r\n    let col = Math.floor(Math.random() * 9);\r\n    sudokuGrid[row][col] = 0;\r\n  }\r\n  \r\n  console.log(sudokuGrid);\r\n\r\n  return sudokuGrid;\r\n};\r\n\r\n// const getSudokuGrid = () => {\r\n//   let sudokuGrid = [\r\n//     [5, 3, 0, 0, 7, 0, 0, 0, 0],\r\n//     [6, 0, 0, 1, 9, 5, 0, 0, 0],\r\n//     [0, 9, 8, 0, 0, 0, 0, 6, 0],\r\n\r\n//     [8, 0, 0, 0, 6, 0, 0, 0, 3],\r\n//     [4, 0, 0, 8, 0, 3, 0, 0, 1],\r\n//     [7, 0, 0, 0, 2, 0, 0, 0, 6],\r\n\r\n//     [0, 6, 0, 0, 0, 0, 2, 8, 0],\r\n//     [0, 0, 0, 4, 1, 9, 0, 0, 5],\r\n//     [0, 0, 0, 0, 8, 0, 0, 7, 9],\r\n//   ];\r\n//   return sudokuGrid;\r\n// };\r\n\r\nconst getNode = (row, column, value, isModifiable) => {\r\n  return {\r\n    row: row,\r\n    column: column,\r\n    value: value,\r\n    isValid: true,\r\n    isModifiable: isModifiable,\r\n    isHinted: false,\r\n  };\r\n};\r\n\r\nconst createSudokuGrid = () => {\r\n  const numberGrid = getSudokuGrid();\r\n  let sudokuGrid = [];\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < 9; j++) {\r\n      let isModifiable = numberGrid[i][j] === 0;\r\n      let node = getNode(i, j, numberGrid[i][j], isModifiable);\r\n      row.push(node);\r\n    }\r\n    sudokuGrid.push(row);\r\n  }\r\n\r\n  return sudokuGrid;\r\n};\r\n\r\nexport default createSudokuGrid;\r\n","const animateElement = (element, animation,prefix = \"animate__\") =>\r\n  // We create a Promise and return it\r\n  new Promise((resolve, reject) => {\r\n    const animationName = `${prefix}${animation}`;\r\n    const node = document.querySelector(element);\r\n\r\n    node.classList.add(`${prefix}animated`, animationName);\r\n\r\n    // When the animation ends, we clean the classes and resolve the Promise\r\n    function handleAnimationEnd(event) {\r\n      event.stopPropagation();\r\n      node.classList.remove(`${prefix}animated`, animationName);\r\n      resolve(\"Animation ended\");\r\n    }\r\n\r\n    node.addEventListener(\"animationend\", handleAnimationEnd, { once: true });\r\n  });\r\n\r\nexport default animateElement;\r\n","const getWrongLines = (board, type) => {\r\n  let wrongLines = new Set();\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let dict = {};\r\n\r\n    for (let j = 0; j < 9; j++) {\r\n      let key;\r\n      if (type === \"horizontal\") key = board[i][j].value;\r\n      else key = board[j][i].value;\r\n\r\n      if (key === 0) continue;\r\n\r\n      if (Object.hasOwnProperty.call(dict, key)) {\r\n        dict[key] += 1;\r\n        if (dict[key] > 1) {\r\n          wrongLines.add(i);\r\n          break;\r\n        }\r\n      } else dict[key] = 1;\r\n    }\r\n  }\r\n  return wrongLines;\r\n};\r\n\r\nconst isBoxValid = (board,x0,y0) => {\r\n  let dict = {};\r\n\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      let key = board[x0 + i][y0 + j].value;\r\n      if (key === 0) continue;\r\n\r\n      if (Object.hasOwnProperty.call(dict, key)) {\r\n        dict[key] += 1;\r\n        if (dict[key] > 1) {\r\n          console.log(x0,y0);\r\n          return false;\r\n        }\r\n      } else dict[key] = 1;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst getWrongBoxes = (board) => {\r\n  let wrongBoxes = new Set();\r\n  let boxValues = {\r\n    0: { x: 0,y: 0 },\r\n    1: { x: 0,y: 3 },\r\n    2: { x: 0,y: 6 },\r\n    3: { x: 3,y: 0 },\r\n    4: { x: 3,y: 3 },\r\n    5: { x: 3,y: 6 },\r\n    6: { x: 6,y: 0 },\r\n    7: { x: 6,y: 3 },\r\n    8: { x: 6,y: 6 },\r\n  };\r\n\r\n  // We check for every boxes\r\n  for (let box = 0; box < 9; box++) {\r\n    // Now check all cells of the selected box\r\n    let x0 = boxValues[box].x;\r\n    let y0 = boxValues[box].y;\r\n\r\n    if(!isBoxValid(board,x0,y0)) {\r\n      wrongBoxes.add(box);\r\n    }\r\n  }\r\n\r\n  return wrongBoxes;\r\n};\r\n\r\nconst getBoxNumber = (x, y) => {\r\n  let x0 = Math.floor(x / 3);\r\n  let y0 = Math.floor(y / 3);\r\n  let BoxNumber = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n  ][x0][y0];\r\n  return BoxNumber;\r\n};\r\n\r\nconst checkBoard = (board) => {\r\n  // Check for the Horizontal\r\n  // we will check all the board\r\n\r\n  let wrongHorizontal = getWrongLines(board, \"horizontal\");\r\n  let wrongVertical = getWrongLines(board, \"vertical\");\r\n  let wrongBoxes = getWrongBoxes(board);\r\n\r\n  console.log(getBoxNumber(1,5));\r\n  console.log(wrongBoxes);\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (\r\n        wrongHorizontal.has(i) ||\r\n        wrongVertical.has(j) ||\r\n        wrongBoxes.has(getBoxNumber(i,j))\r\n      ) {\r\n        board[i][j].isValid = false;\r\n      } else {\r\n        board[i][j].isValid = true;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default checkBoard;\r\n","const isValidNode = (row, col, value, board) => {\r\n  const cellValue = value;\r\n\r\n  // Check horizontal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[row][i].value === cellValue) return false;\r\n  }\r\n\r\n  // Check Vertucal\r\n  for (let i = 0; i < 9; i++) {\r\n    if (board[i][col].value === cellValue) return false;\r\n  }\r\n\r\n  // check box: we have to only check the diagonal of the box\r\n  let x0 = Math.floor(row / 3) * 3;\r\n  let y0 = Math.floor(col / 3) * 3;\r\n  for (let i = 0; i < 3; i++) {\r\n    for (let j = 0; j < 3; j++) {\r\n      if (board[x0 + i][y0 + j].value === cellValue) return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst solveSudoku = (board) => {\r\n  //   console.log(board);\r\n  for (let i = 0; i < 9; i++) {\r\n    for (let j = 0; j < 9; j++) {\r\n      if (board[i][j].value === 0) {\r\n        for (let k = 1; k <= 9; k++) {\r\n          if (isValidNode(i, j, k, board)) {\r\n            board[i][j].value = k;\r\n            if(solveSudoku(board))return true;\r\n            board[i][j].value = 0;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default solveSudoku;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Node from \"../Node/Node\";\r\nimport {\r\n  animateElement,\r\n  arrayDeepCopy,\r\n  checkBoard,\r\n  createSudokuGrid,\r\n  solveSudoku,\r\n} from \"../../utility\";\r\n\r\nimport \"./Grid.css\";\r\nimport \"animate.css\";\r\n\r\nconst Grid = () => {\r\n  const [grid, setGrid] = useState(null);\r\n  const [startingGrid, setStartingGrid] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Creating a grid for the sudoku\r\n    if (\r\n      localStorage.getItem(\"startingGrid\") == null ||\r\n      localStorage.getItem(\"currentGrid\") == null\r\n    ) {\r\n      let newSudokuGrid = createSudokuGrid();\r\n      setStartingGrid(arrayDeepCopy(newSudokuGrid));\r\n      setGrid(arrayDeepCopy(newSudokuGrid));\r\n\r\n      localStorage.setItem(\"startingGrid\", JSON.stringify(newSudokuGrid));\r\n      localStorage.setItem(\"currentGrid\", JSON.stringify(newSudokuGrid));\r\n    } else {\r\n      setStartingGrid(JSON.parse(localStorage.getItem(\"startingGrid\")));\r\n      setGrid(JSON.parse(localStorage.getItem(\"currentGrid\")));\r\n    }\r\n  }, []);\r\n\r\n  const setCurrentGrid = (givenGrid) => {\r\n    // setting the value to the grid and also to the local storage\r\n    setGrid(givenGrid);\r\n    localStorage.setItem(\"currentGrid\", JSON.stringify(givenGrid));\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setCurrentGrid(startingGrid);\r\n  };\r\n\r\n  const handleSolve = () => {\r\n    let solvedBoard = JSON.parse(JSON.stringify(grid));\r\n    let solvedStatus = solveSudoku(solvedBoard);\r\n    if (solvedStatus === false) {\r\n      alert(\"Cannot be solved!\");\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (grid[i][j].value === 0) {\r\n          solvedBoard[i][j].isHinted = true;\r\n          solvedBoard[i][j].isModifiable = false;\r\n        }\r\n      }\r\n    }\r\n    setCurrentGrid(solvedBoard);\r\n  };\r\n\r\n  const handleHint = () => {\r\n    let solvedBoard = JSON.parse(JSON.stringify(grid));\r\n    let solvedStatus = solveSudoku(solvedBoard);\r\n    if (solvedStatus === false) {\r\n      alert(\"Cannot be solved!\");\r\n      return;\r\n    }\r\n\r\n    // Finding all the empty nodes\r\n    let emptyNodePositionList = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (grid[i][j].value === 0) {\r\n          emptyNodePositionList.push([i, j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emptyNodePositionList.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Making new node and replacing the empty value with the hint\r\n    let newBoard = JSON.parse(JSON.stringify(grid));\r\n    const hintNode =\r\n      emptyNodePositionList[\r\n        Math.floor(Math.random() * emptyNodePositionList.length)\r\n      ];\r\n    let hint_row = hintNode[0];\r\n    let hint_column = hintNode[1];\r\n\r\n    newBoard[hint_row][hint_column].value =\r\n      solvedBoard[hint_row][hint_column].value;\r\n    newBoard[hint_row][hint_column].isHinted = true;\r\n    newBoard[hint_row][hint_column].isModifiable = false;\r\n\r\n    setCurrentGrid(newBoard);\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    let newSudokuGrid = createSudokuGrid();\r\n    setStartingGrid(arrayDeepCopy(newSudokuGrid));\r\n    setGrid(arrayDeepCopy(newSudokuGrid));\r\n\r\n    localStorage.setItem(\"startingGrid\", JSON.stringify(newSudokuGrid));\r\n    localStorage.setItem(\"currentGrid\", JSON.stringify(newSudokuGrid));\r\n  }\r\n\r\n  const handleCellClick = (row, column, isModifiable) => {\r\n    if (!isModifiable) {\r\n      animateElement(\".grid-table\", \"headShake\");\r\n      return;\r\n    }\r\n\r\n    let newGrid = [...grid];\r\n\r\n    newGrid[row][column].value = newGrid[row][column].value + 1;\r\n    if (newGrid[row][column].value > 9) newGrid[row][column].value = 0;\r\n\r\n    checkBoard(newGrid);\r\n\r\n    // setting the value to the grid and also to the local storage\r\n    setCurrentGrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Grid\">\r\n      <h1 onClick={() => handleReset()}>Reset</h1>\r\n      <h1 onClick={() => handleSolve()}>Solve</h1>\r\n      <h1 onClick={() => handleHint()}>Hint</h1>\r\n\r\n      <h1 onClick={() => handleNewGame()}>New Game</h1>\r\n\r\n      <table className=\"grid-table\">\r\n        <tbody>\r\n          {grid &&\r\n            grid.map((row, rowIndex) => {\r\n              return (\r\n                <tr className=\"row\" key={rowIndex}>\r\n                  {row.map((cell, columnIndex) => {\r\n                    return (\r\n                      <Node\r\n                        key={rowIndex + \"-\" + columnIndex}\r\n                        cell={cell}\r\n                        handleClickCallback={handleCellClick}\r\n                      />\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from 'react'\r\nimport Grid from './components/Grid/Grid'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"main-heading\">\r\n        Sudoku Game\r\n      </h1>\r\n      <Grid/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}